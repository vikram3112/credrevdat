{"uid":"80d7b078b56f6cc0","name":"test_user_login_ddt","fullName":"testCases.test_UserProfile_DDT.Test_User_Profile_DDT#test_user_login_ddt","historyId":"f2b770701b331b0ea13f409b625ea65c","time":{"start":1705143234818,"stop":1705143241550,"duration":6732},"status":"broken","statusMessage":"PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'","statusTrace":"self = <testCases.test_UserProfile_DDT.Test_User_Profile_DDT object at 0x0000019EE366A690>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8dedb44bcc92d4405319c8daca15a757\")>\n\n    def test_user_login_ddt(self, setup):\n        self.log.info(\"opening browser\")\n        self.driver = setup\n        self.log.info(\"Opening URL \")\n        self.ur = UserProfile_Class(self.driver)\n        self.rows = ExcelFileOperation.rows_count(self.path, 'sheet1')\n        print(self.rows)\n        List = []\n        for r in range(2, self.rows + 1):\n            self.email = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 1)\n            self.password = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 2)\n            self.Exp_Result = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 3)\n            self.log.info(\"------Opening URL Link---------\")\n            self.driver.get(self.LoginUrl)\n            self.log.info(\"Entering Email ->\" + self.email)\n            self.ur.Enter_Email(self.email)\n            self.log.info(\"Entering Password ->\" + self.password)\n            self.ur.Enter_Password(self.password)\n            self.ur.Click_Login_Or_RegisterButton()\n    \n            if self.ur.Validate_Login_Or_Registration() == \"Login or Registration Pass\":\n                if self.Exp_Result == \"Pass\":\n                    List.append(\"Pass\")\n                    self.log.info(\"Testcase is passed\")\n>                   ExcelFileOperation.WriteData(self.path, 'sheet1', r, 4, \"Pass\")\n\ntestCases\\test_UserProfile_DDT.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\ExcelFileOperation.py:20: in WriteData\n    workbook.save(file)\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'\nmode = 'w', compression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1705143231859,"stop":1705143231859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup","time":{"start":1705143231859,"stop":1705143234816,"duration":2957},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'","statusTrace":"self = <testCases.test_UserProfile_DDT.Test_User_Profile_DDT object at 0x0000019EE366A690>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8dedb44bcc92d4405319c8daca15a757\")>\n\n    def test_user_login_ddt(self, setup):\n        self.log.info(\"opening browser\")\n        self.driver = setup\n        self.log.info(\"Opening URL \")\n        self.ur = UserProfile_Class(self.driver)\n        self.rows = ExcelFileOperation.rows_count(self.path, 'sheet1')\n        print(self.rows)\n        List = []\n        for r in range(2, self.rows + 1):\n            self.email = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 1)\n            self.password = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 2)\n            self.Exp_Result = ExcelFileOperation.ReadData(self.path, 'sheet1', r, 3)\n            self.log.info(\"------Opening URL Link---------\")\n            self.driver.get(self.LoginUrl)\n            self.log.info(\"Entering Email ->\" + self.email)\n            self.ur.Enter_Email(self.email)\n            self.log.info(\"Entering Password ->\" + self.password)\n            self.ur.Enter_Password(self.password)\n            self.ur.Click_Login_Or_RegisterButton()\n    \n            if self.ur.Validate_Login_Or_Registration() == \"Login or Registration Pass\":\n                if self.Exp_Result == \"Pass\":\n                    List.append(\"Pass\")\n                    self.log.info(\"Testcase is passed\")\n>                   ExcelFileOperation.WriteData(self.path, 'sheet1', r, 4, \"Pass\")\n\ntestCases\\test_UserProfile_DDT.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\ExcelFileOperation.py:20: in WriteData\n    workbook.save(file)\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'\nmode = 'w', compression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\Dreamer\\\\Documents\\\\pythonProject1\\\\pythonProject\\\\credkartjanproject\\\\testCases\\\\TestData\\\\LoginData.xlsx'\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError","steps":[],"attachments":[{"uid":"562ba3ca95515c49","name":"log","source":"562ba3ca95515c49.txt","type":"text/plain","size":550},{"uid":"f206bf97b02bf0a0","name":"stdout","source":"f206bf97b02bf0a0.txt","type":"text/plain","size":28}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1705143241768,"stop":1705143244053,"duration":2285},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_UserProfile_DDT"},{"name":"subSuite","value":"Test_User_Profile_DDT"},{"name":"host","value":"Dreamer"},{"name":"thread","value":"45920-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_UserProfile_DDT"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"80d7b078b56f6cc0.json","parameterValues":[]}